{
  "session_id": "06998619-6b4a-4d4d-9290-6c1b8e5f99a3",
  "transcript_path": "/Users/russellgrocott/.claude/projects/-Users-russellgrocott-Projects-kineo-analytics/06998619-6b4a-4d4d-9290-6c1b8e5f99a3.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "/Users/russellgrocott/Projects/kineo-analytics/frontend/tests/setup/jest.setup.ts",
    "content": "/**\n * Jest Setup File for React/TypeScript Testing\n * Configures testing environment for Kineo Analytics frontend\n */\n\nimport '@testing-library/jest-dom'\n\n// Global test setup\nbeforeAll(() => {\n  // Mock window.matchMedia for responsive components\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: jest.fn().mockImplementation((query: string) => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: jest.fn(),\n      removeListener: jest.fn(),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      dispatchEvent: jest.fn(),\n    })),\n  })\n\n  // Mock ResizeObserver for D3.js visualizations\n  global.ResizeObserver = jest.fn().mockImplementation(() => ({\n    observe: jest.fn(),\n    unobserve: jest.fn(),\n    disconnect: jest.fn(),\n  }))\n\n  // Mock IntersectionObserver for lazy loading components\n  global.IntersectionObserver = jest.fn().mockImplementation(() => ({\n    observe: jest.fn(),\n    unobserve: jest.fn(),\n    disconnect: jest.fn(),\n  }))\n\n  // Mock Canvas for D3.js chart testing\n  HTMLCanvasElement.prototype.getContext = jest.fn().mockImplementation(() => ({\n    fillRect: jest.fn(),\n    clearRect: jest.fn(),\n    getImageData: jest.fn(() => ({ data: new Array(4) })),\n    putImageData: jest.fn(),\n    createImageData: jest.fn(() => ({ data: new Array(4) })),\n    setTransform: jest.fn(),\n    drawImage: jest.fn(),\n    save: jest.fn(),\n    restore: jest.fn(),\n    beginPath: jest.fn(),\n    moveTo: jest.fn(),\n    lineTo: jest.fn(),\n    closePath: jest.fn(),\n    stroke: jest.fn(),\n    fill: jest.fn(),\n    arc: jest.fn(),\n    scale: jest.fn(),\n    rotate: jest.fn(),\n    translate: jest.fn(),\n    clip: jest.fn(),\n    quadraticCurveTo: jest.fn(),\n    createLinearGradient: jest.fn(() => ({\n      addColorStop: jest.fn(),\n    })),\n  }))\n\n  // Mock WebSocket for real-time features\n  global.WebSocket = jest.fn().mockImplementation(() => ({\n    send: jest.fn(),\n    close: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    readyState: WebSocket.CONNECTING,\n    CONNECTING: 0,\n    OPEN: 1,\n    CLOSING: 2,\n    CLOSED: 3,\n  }))\n\n  // Mock localStorage for customer context\n  const localStorageMock = {\n    getItem: jest.fn((key: string) => localStorage[key] || null),\n    setItem: jest.fn((key: string, value: string) => { localStorage[key] = value }),\n    removeItem: jest.fn((key: string) => { delete localStorage[key] }),\n    clear: jest.fn(() => {\n      Object.keys(localStorage).forEach(key => delete localStorage[key])\n    })\n  }\n  Object.defineProperty(window, 'localStorage', {\n    value: localStorageMock,\n    writable: true\n  })\n\n  // Mock environment variables for testing\n  process.env.NODE_ENV = 'test'\n  process.env.NEXT_PUBLIC_API_URL = 'http://localhost:8000/api/v1'\n})\n\n// Cleanup after each test\nafterEach(() => {\n  jest.clearAllMocks()\n})\n\n// Custom matchers for learning analytics testing\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toHaveValidCustomerContext(): R\n      toBeWithinPerformanceBudget(budget: number): R\n    }\n  }\n}\n\nexpect.extend({\n  toHaveValidCustomerContext(received) {\n    const pass = received && \n                 typeof received.customerId === 'string' &&\n                 received.customerId.match(/^customer_\\d{3}$/) &&\n                 typeof received.customerName === 'string'\n    \n    return {\n      message: () => \n        pass \n          ? `Expected ${JSON.stringify(received)} not to have valid customer context`\n          : `Expected ${JSON.stringify(received)} to have valid customer context with customerId matching pattern customer_XXX and customerName`,\n      pass,\n    }\n  },\n  \n  toBeWithinPerformanceBudget(received, budget) {\n    const pass = typeof received === 'number' && received <= budget\n    \n    return {\n      message: () =>\n        pass\n          ? `Expected ${received}ms to exceed performance budget of ${budget}ms`\n          : `Expected ${received}ms to be within performance budget of ${budget}ms`,\n      pass,\n    }\n  }\n})"
  }
}